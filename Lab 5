-- Creating a table  Student
DROP TABLE IF EXISTS Student;
CREATE TABLE Student(
	Id int,
	Username varchar(20),
	Email varchar(50),
	First_name varchar(20),
	Last_name varchar(20),
	Full_name varchar(20),
	DOB DATE NOT NULL,
	Age int,
	PRIMARY KEY (ID)
);	

-- Insertin Values
INSERT INTO Student(Id,Username,Email,First_name,Last_name,DOB)
Values (1, 'Aayam','aayam_adhikari@gmail.com','Aayam','Adhikari','2000-02-23');

INSERT INTO Student(Id,Username,Email,First_name,Last_name,DOB)
Values (2, 'Nirbhu','nirbhaya_adhikari@gmail.com','Nirbhaay','Adhikari','2002-01-13');
INSERT INTO Student(Id,Username,Email,First_name,Last_name,DOB)
Values (3, 'Saugat','saugat_adhikari@gmail.com','Saugat','Adhikari','1999-10-11');
SELECT * FROM Student;


-- 3.1.	Function that returns the full name of the user with the given ID
CREATE OR REPLACE FUNCTION fullname(uid INTEGER)
	RETURNS character varying
	AS
	$$
	DECLARE
		fname CHARACTER VARYING;
		lname CHARACTER VARYING;
	BEGIN 
		SELECT First_name ,Last_name INTO fname,lname FROM Student WHERE ID = uid;
		
		RETURN fname || ' ' || lname;
	END;
	$$ LANGUAGE plpgsql;

SELECT fullname (1);
	
-- 	3.2.	Function that returns the number of users
DROP FUNCTION IF EXISTS countuser();
CREATE OR REPLACE FUNCTION countuser()
	RETURNS int
	AS
	$$
	DECLARE
		total int;
	BEGIN 
		SELECT COUNT(*) INTO total FROM Student;
		
		RETURN total;
	END;
	$$ LANGUAGE plpgsql;

SELECT countuser() AS total_user;

--3.3. Function that returns the age of the user with the given ID

DROP FUNCTION IF EXISTS age(integer);
CREATE OR REPLACE FUNCTION age(uid INTEGER)
	RETURNS int
	AS
	$$
	DECLARE
		student_age int;
	BEGIN 
		SELECT  date_part('year',AGE(dob)) Into student_age FROM Student WHERE ID = uid;

		RETURN  student_age;
	END;
	$$ LANGUAGE plpgsql;

SELECT age(3);
SELECT * FROM Student;

-- 4.1.	SP to update the full name of the user with the given ID

CREATE OR REPLACE PROCEDURE update_fullname(uid INTEGER)
	AS 
	$$
	BEGIN 
    	UPDATE Student SET Full_name = First_name || ' ' || Last_name WHERE ID = uid;
	END;
	$$ LANGUAGE plpgsql;
CALL update_fullname(1);
CALL update_fullname(2);
CALL update_fullname(3);

SELECT * FROM Student;

-- 4.2. SP to update the age of the user with the given ID

CREATE OR REPLACE PROCEDURE update_age(uid INTEGER)
	AS 
	$$
	BEGIN 
    	UPDATE Student SET age = date_part('year',AGE(dob)) WHERE ID = uid;
	END;
	$$ LANGUAGE plpgsql;

CALL update_age(1);
CALL update_age(2);
CALL update_age(3);

SELECT * FROM Student;


-- Trigger that populates full name on adding a new user
CREATE OR REPLACE FUNCTION full_name()
  RETURNS trigger AS
$$
BEGIN
    NEW.full_name  = NEW.first_name || ' ' || NEW.last_name;
	
RETURN NEW;

END;

$$

LANGUAGE 'plpgsql';


CREATE OR REPLACE TRIGGER fname_trigger

  BEFORE INSERT

  ON Student

  FOR EACH ROW

  EXECUTE FUNCTION full_name();


 INSERT INTO Student(Id,Username,Email,First_name,Last_name,DOB)
Values (12, 'avaya','avaya.bajrachary@gmail.com','Avaya','Bajracharya','2002-05-10');
SELECT * FROM Student;
 
 
-- Trigger that populates age on adding a new user
CREATE OR REPLACE FUNCTION age_calc()
  RETURNS trigger AS
$$
BEGIN
     New.age = date_part('year',current_date)- date_part('year',NEW.DOB);
RETURN NEW;

END;

$$

LANGUAGE 'plpgsql';


CREATE OR REPLACE TRIGGER age_trigger

  BEFORE INSERT

  ON Student

  FOR EACH ROW

  EXECUTE FUNCTION age_calc();


 INSERT INTO Student(Id,Username,Email,First_name,Last_name,DOB)
Values (13, 'avaya','avaya.bajrachary@gmail.com','Avaya','Bajracharya','2002-05-10');
SELECT * FROM Student;


-- 2.Creating a table user_logs
DROP TABLE IF EXISTS user_logs;
CREATE TABLE user_logs(
	Id SERIAL,
	Old_value varchar(20),
	New_value varchar(20),
	Description varchar(20),
	Log_time TIMESTAMP,
	PRIMARY KEY (ID)
);	
-- 5.3.Trigger that inserts a new row in user_logs if any value is updated in users table. 
SELECT * FROM user_logs;
CREATE OR REPLACE FUNCTION user_log()
RETURNS TRIGGER 
AS $$
BEGIN
	IF NEW.last_name <> OLD.last_name THEN
		INSERT INTO user_logs(old_value,new_value,description,log_time)
			Values(OLD.last_name,NEW.last_name,'LAST NAME UPDATED',now());
	END IF;
	IF NEW.first_name <> OLD.first_name THEN
		INSERT INTO user_logs(old_value,new_value,description,log_time)
			Values(OLD.first_name,NEW.first_name,'FIRST NAME UPDATED',now());
	END IF;
	
	IF NEW.dob <> OLD.dob THEN
		INSERT INTO user_logs(old_value,new_value,description,log_time)
			Values(OLD.dob,NEW.dob,'DOB UPDATED',now());
	END IF;
	
	
	RETURN NEW;
END 
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER last_name_changes
	AFTER UPDATE
	ON Student
	FOR EACH ROW
	EXECUTE PROCEDURE user_log();
	
UPDATE Student SET last_name ='Manandhar' where id =13;
UPDATE Student SET first_name ='Anish' where id =13;

SELECT * FROM user_logs

